-----------
[10.18]

1. @Transactional = commit을 자동 실행, 예외 발생시 자동 Rollback 시켜줌.

2. @EnableWebMvc 어노테이션을 사용하면 Spring Framework에서 자동으로 config값을 세팅함.


-----------
[10.19]

1. 엔티티의 생명주기

- 비영속 : 영속성 컨텍스트와 관계가 없는 상태              // Member member = new Member();
- 영속 : 영속성 컨텍스트에 저장된 상태                        // em.persist(member);
- 준영속 : 영속성 컨텍스트에 저장되었다가 분리된 상태
- 삭제 : 삭제된 상태

.find는 영속성을 가진다.

Dept dept = em.find(Dept.class, 10); // find = select, Dept 테이블 내에 값 10을 찾는다.
        dept.setDname("서울"); // 값이 10인 행(레코드)의 Dname을 서울로 변경.

------------
[10.22]

인증 (Authentication) : 사용자의 아이디/패스워드를 증명하는 절차

인가 (Authorization) : 사용자의 권한이 적절한가에 대한 승인 과정 (허가) 


-------------
[10.23]

＊ 객체의 연관관계 : 단방향 관계 (테이블 연관관계 : 양방향)
＊ 데이터베이스 테이블은 외래키 하나로 양방향 조회 가능.
＊ 객체는 양방향 연관 관계라는 것이 없다.

<객체의 연관관계>
＊ 단방향 매핑만으로 매핑완료.
＊ 양방향 매핑은 객체 그래프 탐색 기능 추가

-------------
[10.25]

CSRF : Cross Site Request Forgery(사이트 간 요청 위조)의 줄임말로 웹 취약점 중 하나.
＊ 공격자가 희생자의 권한을 도용하여 특정 웹 사이트의 기능을 실행

세미나같은 발표 노하우 :
＊ 완전히 알고 있는 것, 완전히 알지 못하는 것 분리
＊ 완전히 알고 있는 건 분명히 말하기, 잘 모르는 건 추정하는 식으로. ex) ??? 으로 추정됩니다.
＊ 거짓말 X

---------------
[10.28]

자기소개서, 포트폴리오, 이력서 등 한번만 쓰지 말고 취업 후에도 계속 업데이트를 권장.

validation :
＊ 잘못된 값 입력을 막는 것 
＊ 사용자가 서비스를 제대로 이용하게 끔 유도

validationUtils :
＊ validationUtils 클래스는 객체의 값 검증 코드를 간결하게 작성할 수 있도록 도와준다

required=필수항목입니다.
required.email=이메일은 필수입니다.

그냥 에러코드 보다 에러코드 + "." 필드명이 우선 순위라서 required보다 먼저 나오게 된다. 
(required.email이 required보다 우선) // 책 338p 참고

----------------
[10.30]

필터 : 특정 작업(로깅, 인증, 인가, 데이터 변환 등)의 요청 및 응답을 가로챔
인터셉터 : 특정 URI로 요청했을 때 컨트롤러로 가는 요청을 가로챔

시큐리티 : 필터 + 인터셉터 등의 복잡한 기능
spring security : 인증, 권한, 보안 기능을 제공하는 Spring의 하위 프레임워크

-----------------
[10.31]

스프링 부트의 이벤트 흐름 순서 ex) 주문, 결제 시스템

＊ 먼저 컨트롤러가 클라이언트(사용자)의 요청을 받는다. (주문 생성, 재고 확인, 결제 처리 등등)

＊ 주문이 생성되었다면 퍼블리셔가 특정 이벤트를 발행한다. (OrderCreateEvent 같은)
 - 이때 퍼블리셔가 주문이 완료됐다는 이벤트를 만들어서 시스템에 알리는 것.

＊ 이벤트가 발행되었다면 리스너가 이 이벤트를 감지해서 리스너 내에 코드가 실행되어
 이벤트에 해당하는 필요한 로직이 작동한다.

＊ 처리가 완료되면 클라이언트가 요청한 작업의 결과를 컨트롤러를 거쳐서 보내준다.
 - ex) 메시지를 띄어서 주문이 완료됨, 재고 부족함, 주문 확인 페이지로 리다이렉션 등.



기초 정리

예시
[컨트롤러]

private final CustomEventPublisher customEventPublisher;

@GetMapping("/event/{msg}")
    public void event(@PathVariable Order msg)

＊ 사용자가 주소창에 값을 입력하면 그 값이 msg에 전달된다. (@PathVariable인 경우 주소창에서 전달됨) 

＊ 입력된 값이 Order 객체로 변환되어 msg라는 매개변수에 저장된다

＊ 이 매개변수를 가지고 다양한 로직을 만들 수 있다.
 - 주문 정보를 가지고 생성 로직을 수행, 재고가 없어서 주문을 취소시키는 로직, 결제 로직 실행 등


 @GetMapping("/event/{msg}")
    public void event(@PathVariable Order msg) {
        
        // 주문 메시지를 퍼블리셔에 전달하여 이벤트 발행
        customEventPublisher.doStuffAndPublishAnEvent(msg);
    }

＊ 주문 정보를 msg라는 매개변수가 가지고 있고 이걸 customEventPublisher라는 클래스에 있는
 doStuffAndPublishAnEvent라는 메서드가 msg를 이용해서 코드를 실행한다. (퍼블리셔이므로 이벤트를 발행한다.)

＊ customEventPublisher 클래스를 사용하기 위해서는 컨트롤러 클래스 안에 CustomEventPublisher customEventPublisher; 라는 코드 선언이 필요하다. (public 이든 private 이든)

-----------------------------

[11.01]

개인 프로젝트 기획하기

기타 구매 사이트 (뮤직포스, 스쿨뮤직 등)

회원가입, 로그인, 장바구니, 주문조회, 마이페이지(후순위)

브랜드 별 기타, 앰프 상품 리스트 등, 커뮤니티

메인 화면